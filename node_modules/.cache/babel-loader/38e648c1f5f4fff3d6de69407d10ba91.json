{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/sean/Desktop/CS/react/react-todo-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/sean/Desktop/CS/react/react-todo-app/src/components/TodoApp.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    height: 50px;\\n    padding: 15px;\\n    border-radius: 10px;\\n    border-color: #7fe0fd;\\n    font-size: 1.5em;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Table, Checkbox, Button } from 'semantic-ui-react';\nimport TodoItem from './TodoItem';\nimport styled from 'styled-components';\nconst NewTodo = styled.input(_templateObject());\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\nclass TodoApp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [],\n      newTodo: ''\n    };\n\n    this.fetchTodos = () => {\n      fetch('http://localhost:4500/todos').then(data => data.json()).then(todos => this.setState({\n        todos\n      })).catch(err => console.log({\n        err\n      }));\n    };\n\n    this.handleToggleAll = allToggled => {\n      const todos = this.state.todos;\n      Promise.all(todos.map(todo => fetch(\"http://localhost:4500/todos/\".concat(id), {\n        method: 'PATCH',\n        headers,\n        body: JSON.stringify({\n          completed: !completed\n        })\n      }))).then(this.fetchTodos);\n    };\n\n    this.handleClearCompleted = () => {\n      const todos = this.state.todos;\n      const completedTodos = todos.filter(todo => todo.completed);\n      Promise.all(completedTodos.map(todo => fetch(\"http://localhost:4500/todos/\".concat(todo.id), {\n        method: 'DELETE',\n        headers\n      }))).then(this.fetchTodos);\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      this.setState({\n        newTodo: value\n      });\n    };\n\n    this.handleNewTodoKeyDown = event => {\n      if (this.state.todos.length >= 10) {\n        return; //Only allows for 10 inputs\n      }\n\n      if (event.keyCode !== 13) {\n        return; //Only add when eneter key is hit\n      }\n\n      event.preventDefault();\n      const newTodo = this.state.newTodo;\n      var value = newTodo.trim();\n\n      if (value) {\n        fetch('http://localhost:4500/todos', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            title: value,\n            completed: false\n          })\n        }).then(this.fetchTodos).then(() => this.setState({\n          newTodo: ' '\n        }));\n      }\n    };\n\n    this.handleDelete = id => {\n      fetch(\"http://localhost:4500/todos/\".concat(id), {\n        method: 'DELETE',\n        headers\n      }).then(this.fetchTodos);\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTodos();\n  }\n\n  handleTodoClick(todo, index) {\n    const id = todo.id,\n          completed = todo.completed;\n    fetch(\"http://localhost:4500/todos/\".concat(id), {\n      method: 'PATCH',\n      headers,\n      body: JSON.stringify({\n        completed: !completed\n      })\n    }).then(this.fetchTodos);\n  }\n\n  render() {\n    const todos = this.state.todos;\n    const allToggled = todos.every(todo => todo.completed);\n    return React.createElement(\"div\", {\n      className: \"todo-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(NewTodo, {\n      id: \"new-todo\",\n      placeholder: \"Start a new task?\",\n      autoFocus: true,\n      onChange: this.handleInputChange,\n      onKeyDown: this.handleNewTodoKeyDown,\n      value: this.state.newTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"new-todo\",\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"New Todo\"), todos.length === 0 ? React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Nothing todo!\")))) : React.createElement(Table, {\n      color: \"teal\",\n      unstackable: true,\n      celled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: allToggled,\n      onChange: () => this.handleToggleAll(allToggled),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Toggle All\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.todos.map((todo, i) => React.createElement(TodoItem, {\n      key: i,\n      todo: todo,\n      handleToggle: () => this.handleTodoClick(todo, i),\n      handleDelete: () => this.handleDelete(todo.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }))), React.createElement(Table.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      onClick: this.handleClearCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Clear completed\"))))));\n  }\n\n}\n\nexport default TodoApp;","map":{"version":3,"sources":["/Users/sean/Desktop/CS/react/react-todo-app/src/components/TodoApp.js"],"names":["React","Component","Table","Checkbox","Button","TodoItem","styled","NewTodo","input","headers","TodoApp","state","todos","newTodo","fetchTodos","fetch","then","data","json","setState","catch","err","console","log","handleToggleAll","allToggled","Promise","all","map","todo","id","method","body","JSON","stringify","completed","handleClearCompleted","completedTodos","filter","handleInputChange","event","value","target","handleNewTodoKeyDown","length","keyCode","preventDefault","trim","title","handleDelete","componentDidMount","handleTodoClick","index","render","every","display","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {Table, Checkbox, Button} from 'semantic-ui-react'\nimport TodoItem from './TodoItem'\nimport styled from 'styled-components'\n\nconst NewTodo = styled.input`\n    width: 100%;\n    height: 50px;\n    padding: 15px;\n    border-radius: 10px;\n    border-color: #7fe0fd;\n    font-size: 1.5em;\n`;\n\nconst headers = {\n  'Content-Type': 'application/json'\n}\n\nclass TodoApp extends Component {\n  state = {\n    todos : [  ],\n    newTodo: ''\n  }\n\n  componentDidMount() {\n      this.fetchTodos()\n    }\n\n  fetchTodos = () => {\n    fetch('http://localhost:4500/todos')\n      .then(data => data.json())\n      .then(todos => this.setState({todos}))\n      .catch(err => console.log({err}))\n  }\n\n  handleTodoClick(todo, index) {\n    const {id, completed} = todo\n    fetch(`http://localhost:4500/todos/${id}`,{\n      method: 'PATCH',\n      headers,\n      body: JSON.stringify({completed: !completed})\n    }).then(this.fetchTodos)\n  }\n\n  handleToggleAll = (allToggled) => {\n    const {todos} = this.state\n    Promise.all(todos.map(todo =>\n      fetch(`http://localhost:4500/todos/${id}`, {\n          method: 'PATCH',\n          headers,\n          body: JSON.stringify({completed: !completed})\n        })\n      )\n    ).then(this.fetchTodos)\n  }\n\n  handleClearCompleted = () => {\n    const {todos} = this.state\n    const completedTodos = todos.filter(\n      todo => todo.completed\n    )\n\n    Promise.all(completedTodos.map(todo =>\n      fetch(`http://localhost:4500/todos/${todo.id}`, {\n        method: 'DELETE',\n        headers,\n      })\n    )).then(this.fetchTodos)\n  }\n\n  handleInputChange = event => {\n    const value=event.target.value\n    this.setState({newTodo: value})\n  }\n\n  handleNewTodoKeyDown = event => {\n    if (this.state.todos.length >= 10) {\n      return //Only allows for 10 inputs\n    }\n\n    if (event.keyCode!==13) {\n      return //Only add when eneter key is hit\n    }\n\n    event.preventDefault()\n\n    const {newTodo} = this.state\n    var value = newTodo.trim()\n    if (value) {\n      fetch('http://localhost:4500/todos',{\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          title: value,\n          completed: false\n          })\n        })\n          .then(this.fetchTodos)\n          .then(() => this.setState({newTodo:' '}))\n      }\n    }\n\n  handleDelete = id =>{\n    fetch(`http://localhost:4500/todos/${id}`, {\n      method: 'DELETE',\n      headers,\n    }).then(this.fetchTodos)\n  }\n\n  render() {\n    const {todos} = this.state\n    const allToggled = todos.every(todo => todo.completed)\n    return (\n        <div className='todo-container'>\n          <NewTodo\n            id='new-todo'\n            placeholder='Start a new task?'\n            autoFocus\n            onChange={this.handleInputChange}\n            onKeyDown={this.handleNewTodoKeyDown}\n            value = {this.state.newTodo}\n          />\n          <label\n            htmlFor='new-todo'\n            style={{display: 'none'}}\n          >\n            New Todo\n          </label>\n          {todos.length===0 ? (\n            <Table>\n              <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>\n                      Nothing todo!\n                    </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n            </Table>\n          ) : <Table color='teal' unstackable={true} celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell textAlign='center'>\n                  <Checkbox\n                    checked = {allToggled}\n                    onChange={()=>this.handleToggleAll(allToggled)}\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Toggle All\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n            {this.state.todos.map((todo, i) => (\n              <TodoItem\n                key = {i}\n                todo={todo}\n                handleToggle={() => this.handleTodoClick(todo, i)}\n                handleDelete={() => this.handleDelete(todo.id)}\n              />\n              ))}\n            </Table.Body>\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan='2'>\n                  <Button\n                    size='small'\n                    onClick={this.handleClearCompleted}\n                  >\n                    Clear completed\n                  </Button>\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        }\n        </div>\n    )\n  }\n}\n\nexport default TodoApp;\n"]},"metadata":{},"sourceType":"module"}